<!-- 
  shim.htc: an html5 shim (github.com/chjj) 
  (c) Copyright 2011, Christopher Jeffrey (MIT Licensed) 
-->
<public:component lightweight="true">
  <public:attach event="ondocumentready" 
    for="element" onevent="shim()"/>
</public:component>

<script language="JScript">
  var shim = function() {
    if (function() { 
      var el = element.document.createElement('b');
      el.innerHTML = '<nav></nav>';
      return el.childNodes.length > 0;
    }()) return;

    var doc = element.document
      , head = doc.getElementsByTagName('head')[0]
      , body = doc.body
      , names = new RegExp(
          '^(abbr|article|aside|audio|canvas|details|figcaption'
          + '|figure|footer|header|hgroup|mark|meter|nav|output'
          + '|progress|section|summary|time|video)$', 
        'i');

    // move any html5 elements out of the head
    while (names.test(head.lastChild.nodeName)) {
      body.insertBefore(head.lastChild, body.firstChild);
    }

    var all = body.getElementsByTagName('*')
      , i = 0
      , el;

    // walk the dom tree and 
    // fix the structure accordingly
    while (el = all[i++]) {
      if (names.test(el.nodeName) && !el.firstChild) {
        // turn all the bugged "start-tag" 
        // elements into their real counterparts
        var sub = doc.createElement(el.nodeName)
          , attr = el.attributes
          , l = attr.length;

        while (l--) {
          sub.setAttribute(attr[l].name, attr[l].value);
        }

        el.parentNode.replaceChild(sub, el);

        // append all elements until the corresponding 
        // bugged "close-tag" element is found
        var start = sub.nodeName
          , close = '/' + start
          , depth = 0
          , next;

        while (next = sub.nextSibling) {
          if (next.nodeName === start) {
            depth++;
          } else if (next.nodeName === close) {
            if (!depth--) break;
          }
          sub.appendChild(next);
        }

        // get rid of the bugged "close-tag" element
        if (sub.nextSibling) sub.parentNode.removeChild(sub.nextSibling); 
      }
    }
  };
</script>